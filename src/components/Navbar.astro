---

---

<div id="navbar-trigger" class="fixed top-0 left-0 w-full h-16 z-40"></div>
<nav class="fixed top-0 left-1/2 -translate-x-1/2 z-50 w-fit mt-4 transition-all duration-300 group md:opacity-40 opacity-100">
  <div class="backdrop-blur-md rounded-3xl bg-white/5 dark:bg-black/5 relative transition-all duration-300
              before:absolute before:inset-0 before:rounded-3xl before:p-[1px] before:bg-gradient-to-r 
              before:from-white/10 before:to-white/20 dark:before:from-white/5 dark:before:to-white/10
              before:opacity-100 group-hover:before:opacity-0
              hover:before:from-primary/90 hover:before:to-primary/80
              before:transition-all before:duration-300
              border border-white/10 dark:border-white/5">
    <div class="relative rounded-3xl bg-transparent transition-colors duration-300
                group-hover:bg-white/5 dark:group-hover:bg-white/5">
      <div class="flex items-center h-16 px-6">
        {/* Desktop Menu */}
        <div class="hidden md:flex items-center space-x-6">
          <a href="#hero" class="nav-link px-4 py-2 bg-primary text-white rounded-full hover:bg-primary/90 transition-colors" data-section="hero"> Home </a>
          <a href="#experience" class="nav-link text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light transition-colors font-medium" data-section="experience"> Experience </a>
          <a href="#side-projects" class="nav-link text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light transition-colors font-medium" data-section="side-projects"> Projects </a>
          <a href="#contact" class="nav-link text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light transition-colors font-medium" data-section="contact"> Contact </a>
        </div>

        <button id="theme-toggle" class="md:ml-6 p-2 text-gray-900 dark:text-gray-100 hover:text-primary dark:hover:text-primary-light transition-colors">
          <svg id="theme-toggle-dark" class="hidden h-6 w-6" fill="currentColor" viewBox="0 0 20 20">
            <path d="M17.293 13.293A8 8 0 016.707 2.707a8.001 8.001 0 1010.586 10.586z"></path>
          </svg>
          <svg id="theme-toggle-light" class="hidden h-6 w-6" fill="currentColor" viewBox="0 0 20 20">
            <path
              d="M10 2a1 1 0 011 1v1a1 1 0 11-2 0V3a1 1 0 011-1zm4 8a4 4 0 11-8 0 4 4 0 018 0zm-.464 4.95l.707.707a1 1 0 001.414-1.414l-.707-.707a1 1 0 00-1.414 1.414zm2.12-10.607a1 1 0 010 1.414l-.706.707a1 1 0 11-1.414-1.414l.707-.707a1 1 0 011.414 0zM17 11a1 1 0 100-2h-1a1 1 0 100 2h1zm-7 4a1 1 0 011 1v1a1 1 0 11-2 0v-1a1 1 0 011-1zM5.05 6.464A1 1 0 106.465 5.05l-.708-.707a1 1 0 00-1.414 1.414l.707.707zm1.414 8.486l-.707.707a1 1 0 01-1.414-1.414l.707-.707a1 1 0 011.414 1.414zM4 11a1 1 0 100-2H3a1 1 0 000 2h1z"
            ></path>
          </svg>
        </button>

        {/* Mobile Menu Button */}
        <button class="md:hidden ml-4" id="mobile-menu-button" aria-label="Menu">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 text-gray-700 dark:text-gray-300" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>

      {/* Mobile Menu */}
      <div class="md:hidden hidden" id="mobile-menu">
        <div class="px-2 pt-2 pb-3 space-y-1">
          <a href="#hero" class="block px-3 py-2 text-white bg-primary rounded-md">Home</a>
          <a href="/blog" class="block px-3 py-2 text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light font-medium">Blog</a>
          <a href="#contact" class="block px-3 py-2 text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light font-medium">Contact</a>
          <a href="/resume" class="block px-3 py-2 text-gray-900 dark:text-gray-100 hover:text-primary hover:dark:text-primary-light font-medium">Resume</a>
        </div>
      </div>
    </div>
  </div>
</nav>

<script>
  import { gsap } from 'gsap'
  import { ScrollTrigger } from 'gsap/ScrollTrigger'

  gsap.registerPlugin(ScrollTrigger)

  // Handle mobile menu
  const mobileMenuButton = document.getElementById('mobile-menu-button')
  const mobileMenu = document.getElementById('mobile-menu')

  mobileMenuButton?.addEventListener('click', () => {
    mobileMenu?.classList.toggle('hidden')
  })

  // Theme toggle functionality
  const themeToggleDarkIcon = document.getElementById('theme-toggle-dark')
  const themeToggleLightIcon = document.getElementById('theme-toggle-light')
  const themeToggleBtn = document.getElementById('theme-toggle')

  // Change the icons inside the button based on previous settings
  if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
    themeToggleLightIcon?.classList.remove('hidden')
    document.documentElement.classList.add('dark')
  } else {
    themeToggleDarkIcon?.classList.remove('hidden')
    document.documentElement.classList.remove('dark')
  }

  themeToggleBtn?.addEventListener('click', () => {
    // Toggle icons
    themeToggleDarkIcon?.classList.toggle('hidden')
    themeToggleLightIcon?.classList.toggle('hidden')

    // If is dark mode
    if (document.documentElement.classList.contains('dark')) {
      document.documentElement.classList.remove('dark')
      localStorage.setItem('color-theme', 'light')
    } else {
      document.documentElement.classList.add('dark')
      localStorage.setItem('color-theme', 'dark')
    }
  })

  // Improved navbar scroll behavior - desktop only
  let lastScrollTop = 0
  let scrollTimeout: number | undefined

  // Only apply scroll behavior on desktop
  const isDesktop = window.matchMedia('(min-width: 768px)').matches

  ScrollTrigger.create({
    start: 0,
    end: 'max',
    onUpdate: (self) => {
      if (!isDesktop) return // Skip for mobile
      
      if (scrollTimeout) {
        window.cancelAnimationFrame(scrollTimeout)
      }

      scrollTimeout = window.requestAnimationFrame(() => {
        const scrollTop = self.scroll()
        if (scrollTop > lastScrollTop && scrollTop > 100) {
          // Scrolling down - partially hide navbar (desktop only)
          gsap.to(navbar, {
            opacity: 0.4,
            yPercent: -60,
            duration: 0.3,
            ease: 'power2.inOut',
          })
        }
        lastScrollTop = scrollTop
      })
    },
  })

  // Add smooth hover transition for links
  const navLinks = document.querySelectorAll('nav a');
  navLinks.forEach(link => {
    link.classList.add('transition-all', 'duration-300', 'relative');
    
    if (!link.classList.contains('bg-primary')) {
      link.addEventListener('mouseenter', () => {
        gsap.to(link, {
          color: document.documentElement.classList.contains('dark') ? '#4ade80' : '#16a34a', // light/dark mode colors
          scale: 1.05,
          duration: 0.3,
          ease: 'power2.out'
        });
      });
      
      link.addEventListener('mouseleave', () => {
        gsap.to(link, {
          color: '',
          duration: 0.3,
          ease: 'power2.out'
        });
      });
    }
  });

  // Add mouse trigger behavior
  const navbarTrigger = document.getElementById('navbar-trigger')
  const navbar = document.querySelector('nav') as HTMLElement

  navbarTrigger?.addEventListener('mouseenter', () => {
    if (!isDesktop) return // Skip for mobile
    gsap.to(navbar, {
      opacity: 1,
      yPercent: 0,
      duration: 0.3,
      ease: 'power2.inOut',
    })
  })

  // Hide navbar when mouse leaves (desktop only)
  navbar?.addEventListener('mouseleave', () => {
    if (!isDesktop) return // Skip for mobile
    if (lastScrollTop > 100) {
      gsap.to(navbar, {
        opacity: 0.4,
        yPercent: -60,
        duration: 0.3,
        ease: 'power2.inOut',
      })
    }
  })

  // Add section highlighting functionality
  const observerOptions = {
    root: null,
    rootMargin: '-50% 0px',
    threshold: 0
  };

  const updateActiveLink = (sectionId: string) => {
    document.querySelectorAll('.nav-link').forEach(link => {
      if (link.getAttribute('data-section') === sectionId.replace('#', '')) {
        link.classList.add('active');
        if (!link.classList.contains('bg-primary')) {
          gsap.to(link, {
            color: document.documentElement.classList.contains('dark') ? '#4ade80' : '#16a34a',
            scale: 1.05,
            duration: 0.3
          });
        }
      } else {
        link.classList.remove('active');
        if (!link.classList.contains('bg-primary')) {
          gsap.to(link, {
            color: '',
            scale: 1,
            duration: 0.3
          });
        }
      }
    });
  };

  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        updateActiveLink('#' + entry.target.id);
      }
    });
  }, observerOptions);

  // Observe all sections
  document.querySelectorAll('section[id]').forEach(section => {
    observer.observe(section);
  });

  // Smooth scroll to section
  document.querySelectorAll('.nav-link').forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const href = link.getAttribute('href');
      if (href) {
        const target = document.querySelector(href);
        target?.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });

</script>

<style>
  @media (max-width: 768px) {
    nav {
      opacity: 1 !important;
      transform: translate(-50%, 0) !important;
    }
  }
  nav::after {
    content: '';
    position: absolute;
    inset: -2px;
    z-index: -1;
    border-radius: 24px;
    background: transparent;
    transition: all 0.3s ease;
    filter: blur(8px);
    opacity: 0.5;
  }

  nav:hover::after {
    opacity: 1;
    background: linear-gradient(
      to right, 
      rgba(255, 255, 255, 0.1), 
      rgba(255, 255, 255, 0.05)
    );
  }

  .dark nav:hover::after {
    background: linear-gradient(
      to right, 
      rgba(255, 255, 255, 0.05), 
      rgba(255, 255, 255, 0.02)
    );
  }

  .nav-link.active:not(.bg-primary) {
    position: relative;
  }

  .nav-link.active:not(.bg-primary)::after {
    content: '';
    position: absolute;
    bottom: -4px;
    left: 0;
    width: 100%;
    height: 2px;
    background: linear-gradient(
      to right,
      rgb(var(--color-primary)), 
      rgba(var(--color-primary), 0.8)
    );
    border-radius: 2px;
  }
</style>
