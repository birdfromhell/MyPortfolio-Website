---
import type { Education } from '../lib/api';
import { api } from '../lib/api';

let education: Education[] = [];
let loading = true;
let errorMessage: string | null = null;

try {
  education = await api.getEducation();
  loading = false;
} catch (error) {
  errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
  loading = false;
}

// No need for setInterval in SSR component - this would cause issues
---

<section class="py-20" id="education">
  <div class="container mx-auto px-4">
    <h2 class="text-4xl font-bold text-left mb-12">Education</h2>
    
    {loading ? (
      <div class="text-center py-8">
        <div class="loader"></div>
        <p class="mt-4">Loading education data...</p>
      </div>
    ) : errorMessage ? (
      <div class="text-red-500 py-4">{errorMessage}</div>
    ) : education.length === 0 ? (
      <div class="text-gray-500 py-4">No education data available</div>
    ) : (
      <div class="relative space-y-8">
        {education.map((edu, index) => (
          <div class="education-item flex gap-8">
            <div class="w-32 flex-shrink-0 text-sm text-gray-500 dark:text-gray-400">
              {edu.period}
            </div>
            <div class="flex-1">
              <h3 class="text-xl font-semibold text-gray-900 dark:text-white">{edu.degree}</h3>
              {edu.field && <p class="text-primary font-medium">{edu.field}</p>}
              <p class="mt-2 text-gray-700 dark:text-gray-300">{edu.institution}</p>
              {edu.description && <p class="mt-2 text-gray-600 dark:text-gray-400">{edu.description}</p>}
            </div>
          </div>
        ))}
      </div>
    )}
  </div>
</section>

<style>
  .loader {
    border: 4px solid rgba(0, 0, 0, 0.1);
    border-radius: 50%;
    border-top: 4px solid #3498db;
    width: 40px;
    height: 40px;
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }
  
  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>

<script>
  import { gsap } from 'gsap';
  import { ScrollTrigger } from 'gsap/ScrollTrigger';

  gsap.registerPlugin(ScrollTrigger);

  document.addEventListener('DOMContentLoaded', () => {
    const items = document.querySelectorAll('.education-item');
    
    if (items.length > 0) {
      // Set initial state
      gsap.set(items, {
        opacity: 0,
        y: 50
      });
      
      items.forEach((item, index) => {
        gsap.to(item, {
          scrollTrigger: {
            trigger: item,
            start: "top bottom-=100",
            toggleActions: "play none none reverse"
          },
          opacity: 1,
          y: 0,
          duration: 1,
          ease: "power3.out"
        });
      });
    }
  });
</script>